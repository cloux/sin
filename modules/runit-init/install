#!/bin/sh
#
# Install runit as the default init system
#
# (cloux@rote.ch)
#

# this defines if content of /etc/sv/ will be completely overwritten
# uncomment for a clean distribution, leave commented out when
# user changes should be preserved
#OVERWRITE_RUNIT_BASE=yes

#RUNIT_GIT=https://salsa.debian.org/runit-team/runit.git
RUNIT_GIT=https://github.com/cloux/runit
RUNIT_BASE_GIT=https://github.com/cloux/runit-base
RUNIT_UTILS_GIT=https://github.com/cloux/runit-utils

# load config file
MODULE_PATH=$(realpath "${0%/*}" 2>/dev/null)
[ -f "$MODULE_PATH/config" ] && . "$MODULE_PATH/config"

# check root access
if [ $(id -u) -ne 0 ]; then printf 'Need to be root!\n'; exit 1; fi

#
# check OS distribution
#
DISTRO=$(lsb_release -i 2>/dev/null | sed 's/.*\s//')
printf 'OS: %s %s\n\n' "$DISTRO" "$(uname -srmo)"

#
# manage package dependencies
#
if [ "$(command -v apt-get)" ] && [ -z "$(dpkg -l libelogind0 2>/dev/null | grep ^ii)" ]; then
	printf 'Manage dependencies ...\n\n'
	export DEBIAN_FRONTEND=noninteractive
	printf 'Update list of available packages ...\n'
	apt-get -q -o Dpkg::Use-Pty=0 update || exit 1
	printf 'Install dependencies ...\n'
	apt-get -qy --fix-broken --no-install-recommends -o Dpkg::Use-Pty=0 install \
	  build-essential libc6-dev gcc bootlogd eudev elogind libelogind0 libpam-elogind procps
	printf 'Remove conflicting packages ...\n'
	apt-get -qy --purge --allow-remove-essential -o Dpkg::Use-Pty=0 remove \
	  runit runit-init getty-run 2>/dev/null
	printf '\n'
fi

#
# runit-init (git clone/pull and compile)
#
printf 'Installing runit from %s ...\n' "$RUNIT_GIT"
cd /usr/src
if [ -d "${RUNIT_GIT##*/}" ]; then
	cd ${RUNIT_GIT##*/}
	git fetch -q --all || exit 1
	if [ "$(git rev-parse HEAD)" = "$(git rev-parse @{u})" ]; then
		printf 'Source is up to date.\n'
	else
		git pull -q
	fi
else
	# install dependencies
	[ "$(command -v apt-get)" ] && apt-get -qy --no-install-recommends -o Dpkg::Use-Pty=0 \
	  install git gcc make
	# clone repo
	git clone -q --depth 1 $RUNIT_GIT || exit 1
	cd ${RUNIT_GIT##*/}
fi
cd runit*
# compile & check
package/compile || exit 1
#package/check || exit 1
package/install-man
printf 'Installing commands ...\n'
# use the same target paths as the DEB package
cd command || exit 1
cp -puvf -t /sbin/ runit runit-init
cp -puvf -t /usr/sbin/ runsvchdir utmpset
cp -puvf -t /usr/bin/ chpst runsv runsvdir sv svlogd
[ -f /sbin/init ] || ln /sbin/runit-init /sbin/init
cd ..
# install bash completion
cd ..
if [ -d /usr/share/bash-completion/completions ]; then
	cd debian/contrib
	for cfile in *.bash-completion; do
		cp -pufv $cfile /usr/share/bash-completion/completions/${cfile%%.*}
	done
	cd ../..
fi
# install funny runlevel compatibility script
# NOTE: it will be activated only after runit-init becomes system init,
#       see runit-base:etc/runit/autorun/runit-init
[ -x debian/contrib/runlevel ] && \
  cp -pufv debian/contrib/runlevel /sbin/runlevel.runit

#
# runit-base (git clone/pull)
#
printf '\nInstalling runscripts from %s ...\n' "$RUNIT_BASE_GIT"
cd /usr/src
if [ -d ${RUNIT_BASE_GIT##*/} ]; then
	cd ${RUNIT_BASE_GIT##*/}
	git fetch -q --all || exit 1
	if [ "$(git rev-parse HEAD)" = "$(git rev-parse @{u})" ]; then
		printf 'Source is up to date.\n'
	else
		git pull -q
	fi
else
	# clone repo
	git clone -q --depth 1 $RUNIT_BASE_GIT || exit 1
	cd ${RUNIT_BASE_GIT##*/}
fi
if ! grep -q runit /proc/1/cmdline || [ "$OVERWRITE_RUNIT_BASE" = "yes" ]; then
	# overwrite everything
	printf 'OVERWRITE runit-base ...\n'
	cp -pfPR -t / etc
else
	# if runit is PID1 and overwrite is not forced,
	# copy only new files, notify about differences,
	# do not overwrite local user changes and customizations
	cp -pnvPR -t / etc
	printf 'Differences in %s source:\n' "${PWD}"
	find etc -type f -exec diff -q '{}' /'{}' 2>/dev/null \;
fi

#
# runit-utils support scripts (git clone/pull)
#
printf '\nInstalling runit-utils from %s ...\n' "$RUNIT_UTILS_GIT"
cd /usr/src
if [ -d ${RUNIT_UTILS_GIT##*/} ]; then
	cd ${RUNIT_UTILS_GIT##*/}
	git fetch -q --all || exit 1
	if [ "$(git rev-parse HEAD)" = "$(git rev-parse @{u})" ]; then
		printf 'Source is up to date.\n'
	else
		git pull -q
	fi
else
	# clone repo
	git clone -q --depth 1 $RUNIT_UTILS_GIT || exit 1
fi
cd /usr/src/${RUNIT_UTILS_GIT##*/}/compat
for xfile in shutdown.runit insserv.runit; do
	cp -ufv --preserve=mode "$xfile" /sbin/$xfile
done
for xfile in invoke-rc.d.runit start-statd.runit update-rc.d.runit; do
	cp -ufv --preserve=mode "$xfile" /usr/sbin/$xfile
done
for xfile in pidof.runit; do
	cp -ufv --preserve=mode "$xfile" /bin/$xfile
done
cd /usr/src/${RUNIT_UTILS_GIT##*/}/support && cp -ufv --preserve=mode -t /sbin/ *

#
# install config files
#
[ -d /etc/apt/preferences.d/ ] && cp -ufv "${MODULE_PATH}/inst/apt-runit-init" \
  /etc/apt/preferences.d/runit-init 2>/dev/null

#
# install socklog using a separate installer
# NOTE: this expects the Simple Installer directory structure
#
SOCKLOG_INSTALLER="${MODULE_PATH}/../socklog/install"
if [ -x "$SOCKLOG_INSTALLER" ]; then
	"$SOCKLOG_INSTALLER"
else
	printf '\nWARNING: Socklog installer is missing, expected to be here:\n%s\n' \
	"$SOCKLOG_INSTALLER"
fi

#
# exit if runit is already PID1
#
if grep -q runit /proc/1/cmdline; then
	printf '\nUPDATE COMPLETE\n'
	exit
fi

#
# activate runit supervision for currently running services
#
printf '\nDetect and activate current services ...\n\n'
for PROCNAME in acpid cron dovecot dnsmasq elogind hiawatha lircd nginx nscd \
  oomd opendkim php-fpm postfix proftpd pure-ftpd redis-server redis-sentinel \
  rpcbind rpc.mountd smbd uuidd wicd; do
	SRV="$(pgrep -ax $PROCNAME)"
	if [ "$SRV" ]; then
		printf 'Found %s: %s\n' "$PROCNAME" "$SRV"
		ln -sf /etc/sv/$PROCNAME /etc/service/
	fi
done
SRV="$(pgrep -ax bluetoothd)"
if [ "$SRV" ]; then
	printf 'Found bluetooth: %s\n' "$SRV"
	ln -sf /etc/sv/bluetooth /etc/service/
fi
SRV="$(pgrep -ax cupsd)"
if [ "$SRV" ]; then
	printf 'Found cups: %s\n' "$SRV"
	ln -sf /etc/sv/cups /etc/service/
fi
SRV="$(pgrep -ax dbus-daemon | grep system)"
if [ "$SRV" ]; then
	printf 'Found dbus: %s\n' "$SRV"
	ln -sf /etc/sv/dbus /etc/service/
fi
SRV="$(pgrep -ax famd)"
if [ "$SRV" ]; then
	printf 'Found fam: %s\n' "$SRV"
	ln -sf /etc/sv/fam /etc/service/
fi
SRV="$(pgrep -ax incrond)"
if [ "$SRV" ]; then
	printf 'Found incron: %s\n' "$SRV"
	ln -sf /etc/sv/incron /etc/service/
fi
SRV="$(pgrep -ax mongod)"
if [ "$SRV" ]; then
	printf 'Found mongodb: %s\n' "$SRV"
	ln -sf /etc/sv/mongo /etc/service/
fi
SRV="$(pgrep -ax mysqld)"
if [ "$SRV" ]; then
	printf 'Found mysql: %s\n' "$SRV"
	ln -sf /etc/sv/mysql /etc/service/
fi
SRV="$(pgrep -ax pg_ctlcluster)"
if [ "$SRV" ]; then
	printf 'Found postgresql: %s\n' "$SRV"
	ln -sf /etc/sv/postgresql /etc/service/
fi
SRV="$(pgrep -ax smartd)"
if [ "$SRV" ]; then
	printf 'Found smartmontools: %s\n' "$SRV"
	ln -sf /etc/sv/smartmontools /etc/service/
fi
SRV="$(pgrep -ax udevd | head -n 1)"
if [ "$SRV" ]; then
	if [ -f /etc/init.d/eudev ]; then
		printf 'Found eudev: %s\n' "$SRV"
		ln -sf /etc/sv/eudev /etc/service/
	else
		printf 'Found udevd: %s\n' "$SRV"
		ln -sf /etc/sv/udevd /etc/service/
	fi
fi
SRV="$(pgrep -af sbin/sshd)"
if [ "$SRV" ]; then
	printf 'Found ssh: %s\n' "$SRV"
	ln -sf /etc/sv/ssh /etc/service/
fi
# GUI services
DEFAULT_DISPLAY_MANAGER="$(head -n 1 /etc/X11/default-display-manager 2>/dev/null)"
if [ -x "$DEFAULT_DISPLAY_MANAGER" ]; then
	printf 'Found display manager: %s - activating X11dm\n' "${DEFAULT_DISPLAY_MANAGER##*/}"
	ln -sf /etc/sv/X11dm /etc/service/
	ln -sf /etc/sv/dbus /etc/service/
	ln -sf /etc/sv/elogind /etc/service/
else
	printf 'Display manager not found, deactivating X11dm\n'
	rm -f /etc/service/X11dm
fi

#
# info about direct boot
#
if [ -f /etc/default/grub ] &&
! grep -q '^ *GRUB_DEVICE.*PART' /etc/default/grub
then
	PARTUUID="$(findmnt -n -o PARTUUID -M / 2>/dev/null)"
	DEVICE_OVERRIDE='GRUB_DEVICE="PARTUUID='$PARTUUID'"'
	printf '\nIf you boot without initramfs, add this line to /etc/default/grub:\n'
	printf '%s\n' "$DEVICE_OVERRIDE"
fi

#
# final info
#
printf '\n To switch to runit-init, tell the kernel to use runit:\n'
printf '   ln -f /sbin/runit-init /sbin/init\n'
if [ -f /etc/default/grub ]; then
	printf ' Or:\n'
	printf '  1. edit /etc/default/grub and add\n'
	printf '     GRUB_CMDLINE_LINUX_DEFAULT="init=/sbin/runit-init"\n'
	printf '  2. run "update-grub" and reboot.\n'
fi
printf '\n WARNING: BROKEN INIT SYSTEM MIGHT KILL JOHN WICK'\''S DOG!\n\n'
printf ' INSTALLATION COMPLETE\n'
