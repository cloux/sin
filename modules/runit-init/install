#!/bin/sh
#
# Install runit as the default init system
#
# (cloux@rote.ch)
#

# this defines if content of /etc/sv/ will be completely overwritten
# uncomment for a clean distribution, leave commented out when
# user changes should be preserved
#OVERWRITE_RUNIT_BASE=yes

#RUNIT_GIT=https://salsa.debian.org/runit-team/runit.git
RUNIT_GIT=https://github.com/cloux/runit
RUNIT_BASE_GIT=https://github.com/cloux/runit-base

# load config file
MODULE_PATH=$(realpath "${0%/*}" 2>/dev/null)
[ -f "$MODULE_PATH/config" ] && . "$MODULE_PATH/config"

# check root access
if [ $(id -u) -ne 0 ]; then printf "Need to be root!\n"; exit 1; fi

printf "Installing runit-init ...\n\n"

#
# check OS distribution
#
DISTRO=$(lsb_release -i 2>/dev/null | sed 's/.*\s//')
printf "System info: %s %s\n\n" "$DISTRO" "$(uname -srmo)"

#
# manage package dependencies
#
APTINST="$(command -v aptitude)"
[ "$APTINST" ] || APTINST="$(command -v apt-get)" 
if [ "$APTINST" ] && dpkg -l udev 2>/dev/null | grep -q ^ii; then
	export DEBIAN_FRONTEND=noninteractive
	printf "Update list of available packages ...\n"
	$APTINST -f --assume-yes -o Dpkg::Use-Pty=0 update
	printf "Install dependencies ...\n"
	$APTINST -f --assume-yes -o Dpkg::Use-Pty=0 install \
	  libc6-dev gcc bootlogd eudev elogind libelogind0 libpam-elogind
	printf "Remove conflicting packages ...\n"
	$APTINST -f --assume-yes -o Dpkg::Use-Pty=0 remove \
	  runit runit-init getty-run
fi

#
# runit-init (git clone/pull and compile)
#
printf "\nInstalling runit-init from %s ...\n" "$RUNIT_GIT"
cd /usr/src
if [ -d "${RUNIT_GIT##*/}" ]; then
	cd ${RUNIT_GIT##*/}
	git fetch -q --all || exit 1
	if [ "$(git rev-parse HEAD)" = "$(git rev-parse @{u})" ]; then
		printf "Runit source is up to date, nothing to do.\n"
	else
		git pull -q || exit 1
	fi
else
	# install dependencies
	[ "$APTINST" ] && $APTINST --assume-yes -o Dpkg::Use-Pty=0 \
	  install git gcc make
	# clone repo
	git clone -q $RUNIT_GIT || exit 1
	cd ${RUNIT_GIT##*/}
fi
cd runit*
# compile & check
package/compile || exit 1
#package/check || exit 1
# install manpages
package/install-man
# install runit-init, use the same target paths as the DEB package
cd command || exit 1
printf "\nInstalling runit-init commands ...\n"
cp -puvf -t /sbin/ runit runit-init
cp -puvf -t /usr/sbin/ runsvchdir utmpset
cp -puvf -t /usr/bin/ chpst runsv runsvdir sv svlogd
cd ..
# clean up
#rm -rf command/ compile/
# install bash completion
cd ..
if [ -d /usr/share/bash-completion/completions ]; then
	cd debian/contrib
	for cfile in *.bash-completion; do
		cp -pufv $cfile /usr/share/bash-completion/completions/${cfile%%.*}
	done
	cd ../..
fi
# install funny runlevel compatibility script
# NOTE: it will be activated only after runit-init becomes system init,
#       see runit-base:etc/runit/autorun/runit-init
[ -x debian/contrib/runlevel ] && \
  cp -pufv debian/contrib/runlevel /sbin/runlevel.runit

#
# runit-base (git clone/pull)
#
printf "\nInstalling runscripts from %s ...\n" "$RUNIT_BASE_GIT"
cd /usr/src
if [ -d ${RUNIT_BASE_GIT##*/} ]; then
	cd ${RUNIT_BASE_GIT##*/}
	git fetch -q --all || exit 1
	if [ "$(git rev-parse HEAD)" = "$(git rev-parse @{u})" ]; then
		printf "Up to date, nothing to do.\n"
	else
		git pull -q || exit 1
	fi
else
	# clone repo
	git clone -q $RUNIT_BASE_GIT || exit 1
	cd ${RUNIT_BASE_GIT##*/}
fi
if grep -vq runit /proc/1/cmdline || [ "$OVERWRITE_RUNIT_BASE" = "yes" ]; then
	# overwrite everything
	printf "OVERWRITE runit-base ...\n"
	rm -rf /etc/sv/ /etc/runit/autorun/ /etc/runit/[1-3]
	cp -pfPR -t / etc
else
	# if runit is PID1 and overwrite is not forced,
	# copy only new files, notify about differences,
	# do not overwrite local user changes and customizations
	cp -pnvPR -t / etc
	printf "These runit-base files differ:\n"
	find etc -type f -exec diff -q '{}' /'{}' 2>/dev/null \;
	printf "\n"
fi

#
# copy support scripts and config files
#
printf "\nInstalling runit system compatibility scripts ...\n"
# copy non-conflicting scripts
for xfile in svactivate svdeactivate shutdown.runit insserv.runit; do
	cp -pufv "${MODULE_PATH}/inst/$xfile" /sbin/$xfile
done
for xfile in start-statd.runit update-rc.d.runit; do
	cp -pufv "${MODULE_PATH}/inst/$xfile" /usr/sbin/$xfile
done
for xfile in pidof.runit; do
	cp -pufv "${MODULE_PATH}/inst/$xfile" /bin/$xfile
done
# copy config files
[ -d /etc/apt/preferences.d/ ] && cp -ufv ${0%/*}/inst/apt-runit-init \
  /etc/apt/preferences.d/runit-init 2>/dev/null
printf "done\n\n"

#
# install socklog using a separate installer
# NOTE: this expects the Simple Installer directory structure
#
SOCKLOG_INSTALLER="${MODULE_PATH}/../socklog/install"
if [ -x "$SOCKLOG_INSTALLER" ]; then
	"$SOCKLOG_INSTALLER"
else
	printf "\nWARNING: Socklog installer is missing, expected to be here:\n%s\n" \
	"$SOCKLOG_INSTALLER"
fi

#
# exit if runit is already PID1
#
if grep -q runit /proc/1/cmdline; then
	printf "\nUPDATE COMPLETE!\n\n"
	exit
fi

#
# activate runit supervision for currently running services
#
printf "\nDetect and activate current services ...\n\n"
for PROCNAME in acpid dovecot cron elogind hiawatha nginx oomd opendkim \
  php-fpm postfix proftpd redis-server redis-sentinel rpcbind rpc.mountd \
  smbd udevd uuidd wicd; do
	SRV="$(pgrep -ax $PROCNAME)"
	if [ "$SRV" ]; then
		printf "Found $PROCNAME: %s\n" "$SRV"
		ln -sf /etc/sv/$PROCNAME /etc/service/
	fi
done
SRV="$(pgrep -ax bluetoothd)"
if [ "$SRV" ]; then
	printf "Found bluetooth: %s\n" "$SRV"
	ln -sf /etc/sv/bluetooth /etc/service/
fi
SRV="$(pgrep -ax cupsd)"
if [ "$SRV" ]; then
	printf "Found cups: %s\n" "$SRV"
	ln -sf /etc/sv/cups /etc/service/
fi
SRV="$(pgrep -ax dbus-daemon)"
if [ "$SRV" ]; then
	printf "Found dbus: %s\n" "$SRV"
	ln -sf /etc/sv/dbus /etc/service/
fi
SRV="$(pgrep -ax incrond)"
if [ "$SRV" ]; then
	printf "Found incron: %s\n" "$SRV"
	ln -sf /etc/sv/incron /etc/service/
fi
SRV="$(pgrep -ax mongod)"
if [ "$SRV" ]; then
	printf "Found mongodb: %s\n" "$SRV"
	ln -sf /etc/sv/mongo /etc/service/
fi
SRV="$(pgrep -ax mysqld)"
if [ "$SRV" ]; then
	printf "Found mysql: %s\n" "$SRV"
	ln -sf /etc/sv/mysql /etc/service/
fi
SRV="$(pgrep -ax pg_ctlcluster)"
if [ "$SRV" ]; then
	printf "Found postgresql: %s\n" "$SRV"
	ln -sf /etc/sv/postgresql /etc/service/
fi
SRV="$(pgrep -a pure-ftpd)"
if [ "$SRV" ]; then
	printf "Found pureftpd: %s\n" "$SRV"
	ln -sf /etc/sv/pureftpd /etc/service/
fi
SRV="$(pgrep -af sbin/sshd)"
if [ "$SRV" ]; then
	printf "Found ssh: %s\n" "$SRV"
	ln -sf /etc/sv/ssh /etc/service/
fi
# GUI services
DEFAULT_DISPLAY_MANAGER="$(head -n 1 /etc/X11/default-display-manager 2>/dev/null)"
if [ -x "$DEFAULT_DISPLAY_MANAGER" ]; then
	printf "Found display manager: %s - activating X11dm\n" "${DEFAULT_DISPLAY_MANAGER##*/}"
	ln -sfv /etc/sv/X11dm /etc/service/
else
	printf "Display manager not found, deactivating X11dm\n"
	rm -f /etc/service/X11dm
fi

printf "\nINSTALLATION COMPLETE!\n\n"
printf " To switch to runit-init system, tell the kernel to use runit:\n"
printf "  1. edit /etc/default/grub and add\n"
printf "     GRUB_CMDLINE_LINUX_DEFAULT=\"init=/sbin/runit-init\"\n"
printf "  2. run 'update-grub' and reboot.\n\n"
printf " WARNING: BROKEN INIT SYSTEM MIGHT KILL JOHN WICKS DOG!\n\n"
