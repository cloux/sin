#!/bin/sh
#
# AdoptOpenJDK installer
#
# Docs: https://adoptopenjdk.net
#  API: https://api.adoptopenjdk.net/swagger-ui
#
# (cloux@rote.ch)
##################################################################
exec 2>&1

# Java Package Parameters
# aix | linux | mac | solaris
OS=linux
# aarch64 | arm | ppc64 | ppc64le | s390x | sparcv9 | x32 | x64
ARCH=x64
# releases | nightly
RELEASE_TYPE=releases
# jre | jdk
BIN_TYPE=jdk
# 8, 9, 10, 11, 12 ... | feature | lts
VERSION=lts
# JVM variant: openj9 | hotspot
JVM=openj9
# Heap: normal | large
HEAP_SIZE=normal

# use configuration file to override the defaults above
MODULE_PATH=$(realpath "${0%/*}" 2>/dev/null)
[ -r "$MODULE_PATH/conf" ] && . "$MODULE_PATH/conf"
[ -r /etc/default/adoptopenjdk ] && . /etc/default/adoptopenjdk

##################################################################
printf 'AdoptOpenJDK installer - '
if [ $(id -u) -eq 0 ]; then
	# root install
	printf 'SYSTEM (as root)\n'
	ARCHIVE_DIR=/var/cache/sin
	TARGET_PATH=/usr/lib/jvm
	MAN_PATH=/usr/share/man
else
	# local install
	printf 'LOCAL (as %s)\n' "$(id -nu)"
	ARCHIVE_DIR=~/.cache/sin
	TARGET_PATH=~/.local/lib/jvm
	MAN_PATH=~/.local/share/man
	# add local manpages to ~/.manpath
	MANPATH_LINE="MANDATORY_MANPATH $MAN_PATH"
	grep -qF "$MANPATH_LINE" ~/.manpath 2>/dev/null ||
	  printf '%s\n' "$MANPATH_LINE" >> ~/.manpath
fi

# check dependencies
for DEP in wget jq; do
	if ! command -v "$DEP" >/dev/null; then
		printf 'ERROR: Please install "%s" to continue.\n' "$DEP"
		exit 1
	fi
done

printf '\nSearching for latest %s %s %s for %s %s ... ' \
"$BIN_TYPE" "$VERSION" "$JVM" "$OS" "$ARCH"

API_BASE='https://api.adoptopenjdk.net/v3'

# get release version number
if [ "$VERSION" = "feature" ]; then
	VERSION=$(wget -q4 --tries=1 -O - "$API_BASE/info/available_releases" |
	  jq -r '.most_recent_feature_release')
elif [ "$VERSION" = "lts" ]; then
	VERSION=$(wget -q4 --tries=1 -O - "$API_BASE/info/available_releases" |
	  jq -r '.most_recent_lts')
fi
printf '%s' "$VERSION" | grep -qE '^[0-9]+$' || exit 1

# get releases JSON
API_ASSETS=$API_BASE'/assets/feature_releases/'$VERSION'/ga?architecture='\
$ARCH'&heap_size='$HEAP_SIZE'&image_type='$BIN_TYPE'&jvm_impl='$JVM'&os='$OS
RELEASES_JSON="$(wget -q4 --tries=1 -O - "$API_ASSETS")"
if [ $? -ne 0 ]; then
	printf 'failed\n'
	exit 1
fi

# parse first JSON element
SEMVER=$(printf '%s' "$RELEASES_JSON" | jq -r '.[0].version_data.semver')
if [ -z "$SEMVER" ]; then
	printf 'error, invalid reply:\n%s\n' "$RELEASES_JSON"
	exit 1
fi
BIN_SIZE=$(printf '%s' "$RELEASES_JSON" | jq -r '.[0].binaries[0].package.size')
printf 'found: v%s (%s MB)\n\n' "$SEMVER" "$((BIN_SIZE/1024/1024))"
BIN_LINK=$(printf '%s' "$RELEASES_JSON" | jq -r '.[0].binaries[0].package.link')
if [ -z "$BIN_LINK" ]; then
	printf 'Error: invalid link in reply.\n'
	exit 1
fi
BIN_FILE=$(printf '%s' "$BIN_LINK" | grep -o '[^/]*$')

# download the file if necessary
[ -d "$ARCHIVE_DIR" ] || mkdir -p "$ARCHIVE_DIR"
cd $ARCHIVE_DIR || exit 1
if [ -f "$BIN_FILE" ] && [ "$BIN_SIZE" -ge "$(stat -c '%s' "$BIN_FILE")" ]; then
	printf 'Package already available: %s/%s\n' "$ARCHIVE_DIR" "$BIN_FILE"
	gzip --test "$BIN_FILE" || rm -f "$BIN_FILE"
fi
if [ ! -f "$BIN_FILE" ]; then
	printf 'Downloading into %s ...\n\n' "$ARCHIVE_DIR"
	wget -4 --tries=1 --progress=dot:giga "$BIN_LINK" || exit 1
fi
[ -s "$BIN_FILE" ] || exit 1

# unpack
printf 'Unpacking %s ... ' "$BIN_FILE"
tar xzf "$BIN_FILE"
if [ $? -ne 0 ]; then
	printf 'ERROR\n'
	rm -vf "$BIN_FILE"
	exit 1
fi
printf 'OK\n'
ADOPT_DIR=$(find -maxdepth 1 -type d -iname '*'$BIN_TYPE'*' -printf '%f' -quit)

# delete old distributions from cache
find "$ARCHIVE_DIR" -maxdepth 1 -type f ! -iname "$BIN_FILE" \
  -iname '*'${BIN_TYPE}_${ARCH}_${OS}_${JVM}_'*' -delete

# install
if [ -d "$TARGET_PATH/$ADOPT_DIR" ]; then
	printf 'Path %s already exists.\n' "$TARGET_PATH/$ADOPT_DIR"
	rm -rf "$ADOPT_DIR"
else
	printf 'Installing into %s ...\n' "$TARGET_PATH/$ADOPT_DIR"
	[ -d "$TARGET_PATH" ] || mkdir -p "$TARGET_PATH"
	mv -t "$TARGET_PATH" "$ADOPT_DIR"
	chown -R root: "$TARGET_PATH/$ADOPT_DIR"
fi
cd "$TARGET_PATH"/"$ADOPT_DIR" || exit 1
rm -f "$TARGET_PATH/latest" 2>/dev/null && ln -sf "$ADOPT_DIR" "$TARGET_PATH/latest"
rm -f "$TARGET_PATH/default-java" 2>/dev/null && ln -sf latest "$TARGET_PATH/default-java"

# install manpages
# NOTE: this ignores the update-alternatives system!
printf 'Installing manpages ... '
find man -type f ! -iname '*.gz' -exec gzip '{}' \;
[ -d "$MAN_PATH"/man1 ] || mkdir -p "$MAN_PATH"/man1
ln -sf -t "$MAN_PATH"/man1 "$TARGET_PATH"/latest/man/man1/*.gz
printf 'OK\n'

# update-alternatives for system installation
ALT=$(command -v update-alternatives || command -v alternatives)
if [ $(id -u) -eq 0 ] && [ -x "$ALT" ]; then
	for f in $(find "$TARGET_PATH/$ADOPT_DIR/bin" -type f -printf '%f '); do
		if ! $ALT --display $f 2>/dev/null | grep currently | grep -q "$ADOPT_DIR"; then
			printf 'Set alternative for %s to %s\n' "$f" "$ADOPT_DIR"
			$ALT --install /usr/bin/$f $f "$TARGET_PATH/$ADOPT_DIR/bin/$f" 400 >/dev/null 2>/dev/null
			$ALT --set $f "$TARGET_PATH/$ADOPT_DIR/bin/$f" >/dev/null 2>/dev/null
		fi
		for invalid in $($ALT --display $f 2>&1 | grep warning: | grep -o '/.*/'); do
			printf 'Remove invalid alternative %s\n' "$invalid$f"
			$ALT --remove $f "$invalid$f" >/dev/null 2>/dev/null
		done
	done
else
	printf '\nAdd "%s" into your PATH.\n\n' "$TARGET_PATH/latest/bin"
fi

printf '\nDONE\n\n'
